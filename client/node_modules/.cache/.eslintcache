[{"/home/oliverlinux/dcf/client/src/index.tsx":"1","/home/oliverlinux/dcf/client/src/App.tsx":"2","/home/oliverlinux/dcf/client/src/Chart.tsx":"3","/home/oliverlinux/dcf/client/src/PayoutCalculator.tsx":"4"},{"size":501,"mtime":1685913428306,"results":"5","hashOfConfig":"6"},{"size":1930,"mtime":1685980202226,"results":"7","hashOfConfig":"6"},{"size":992,"mtime":1685910603136,"results":"8","hashOfConfig":"6"},{"size":3352,"mtime":1685978816952,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1xup5gj",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"13"},"/home/oliverlinux/dcf/client/src/index.tsx",[],[],[],"/home/oliverlinux/dcf/client/src/App.tsx",[],[],"/home/oliverlinux/dcf/client/src/Chart.tsx",[],[],"/home/oliverlinux/dcf/client/src/PayoutCalculator.tsx",["24"],[],"import React, { useState, useEffect } from \"react\";\nimport { Box, Input, Text, Flex, Image } from \"@chakra-ui/react\";\n\ninterface PayoutCalculatorProps {\n  totalBalance: number;\n}\n\nconst TEAM_MARKETING_RESERVE_PERCENTAGE = 0.46;\nconst NFT_HOLDERS_PERCENTAGE = 0.54;\n\nconst PayoutCalculator: React.FC<PayoutCalculatorProps> = ({\n  totalBalance,\n}) => {\n  const [nftsOwned, setNftsOwned] = useState(0);\n  const teamMarketingReserve = totalBalance * TEAM_MARKETING_RESERVE_PERCENTAGE;\n  const nftHolders = totalBalance * NFT_HOLDERS_PERCENTAGE;\n  const payoutPerNft = nftHolders / 20000;\n  let payoutForOwnedNfts = payoutPerNft * nftsOwned;\n\n  useEffect(() => {\n    payoutForOwnedNfts = payoutPerNft * nftsOwned;\n  }, [nftsOwned, payoutPerNft]);\n\n  return (\n    <Box>\n      <Flex direction=\"row\" justify=\"center\" align=\"center\" my={4}>\n        <Box\n        background={\"#16182e\"}\n          borderWidth=\"1px\"\n          borderRadius=\"lg\"\n          overflow=\"hidden\"\n          p={4}\n          boxShadow=\"lg\"\n          mx={2}\n        >\n          <Text fontSize=\"sm\" color=\"gray.500\" textAlign=\"center\">\n            Total Made\n          </Text>\n          <Text fontSize=\"2xl\" fontWeight=\"bold\" textAlign=\"center\">\n            {totalBalance.toFixed(0)} SOL\n          </Text>\n        </Box>\n        <Text fontSize=\"xl\">-</Text>\n        <Box\n        background={\"#16182e\"}\n          borderWidth=\"1px\"\n          borderRadius=\"lg\"\n          overflow=\"hidden\"\n          p={4}\n          boxShadow=\"lg\"\n          mx={2}\n        >\n          <Text fontSize=\"sm\" color=\"gray.500\" textAlign=\"center\">\n            Team, Marketing, Reserve\n          </Text>\n          <Text fontSize=\"2xl\" fontWeight=\"bold\" textAlign=\"center\">\n            {teamMarketingReserve.toFixed(0)} SOL\n          </Text>\n        </Box>\n        <Text fontSize=\"xl\">=</Text>\n        <Box\n        background={\"#16182e\"}\n          borderWidth=\"1px\"\n          borderRadius=\"lg\"\n          overflow=\"hidden\"\n          p={4}\n          boxShadow=\"lg\"\n          mx={2}\n        >\n          <Text fontSize=\"sm\" color=\"gray.500\" textAlign=\"center\">\n            NFT Holders\n          </Text>\n          <Text fontSize=\"2xl\" fontWeight=\"bold\" textAlign=\"center\">\n            {nftHolders.toFixed(0)} SOL\n          </Text>\n        </Box>\n      </Flex>\n\n      <Box\n      background={\"#16182e\"}\n        borderWidth=\"1px\"\n        borderRadius=\"lg\"\n        overflow=\"hidden\"\n        p={4}\n        boxShadow=\"lg\"\n        textAlign=\"center\"\n       marginBottom={4}\n      >\n        <Flex direction=\"row\" align=\"center\" justify=\"center\" mb={4}>\n          <Text fontSize=\"50px\" fontWeight=\"bold\">\n            1\n          </Text>\n          <Image\n            className=\"logo\"\n            src=\"/cat.png\"\n            alt=\"Logo\"\n            boxSize=\"50px\"\n            ml={2}\n            mr={2}\n          />\n          <Text fontSize=\"50px\" fontWeight=\"bold\">\n            = {payoutPerNft.toFixed(4)} SOL\n          </Text>\n        </Flex>\n        <Box>\n          <Input\n           maxW={400}\n            placeholder=\"Enter NFTs owned\"\n            onChange={(e) => setNftsOwned(Number(e.target.value))}\n          />\n        </Box>\n        <Text fontSize=\"xl\" fontWeight=\"bold\" mt={4}>\n          Payout for owned NFTs: {payoutForOwnedNfts.toFixed(2)} SOL\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default PayoutCalculator;\n",{"ruleId":"25","severity":1,"message":"26","line":21,"column":26,"nodeType":"27","endLine":21,"endColumn":50},"react-hooks/exhaustive-deps","Assignments to the 'payoutForOwnedNfts' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","BinaryExpression"]